package net.jeeshop.services.manage.product.dao.impl;import java.util.List;import net.jeeshop.core.dao.BaseDao;import net.jeeshop.core.dao.page.PagerModel;import com.tuisitang.modules.shop.entity.ProductCatalogRela;import com.tuisitang.modules.shop.entity.ProductHit;import com.tuisitang.modules.shop.entity.ProductSellCount;import com.tuisitang.modules.shop.entity.ProductStockInfo;import net.jeeshop.services.manage.product.bean.Product;import net.jeeshop.services.manage.product.dao.ProductDao;public class ProductDaoImpl implements ProductDao {	private BaseDao dao;	public void setDao(BaseDao dao) {		this.dao = dao;	}	public PagerModel selectPageList(Product e) {		return dao.selectPageList("manage.product.selectPageList",				"manage.product.selectPageCount", e);	}	public List selectList(Product e) {		return dao.selectList("manage.product.selectList", e);	}	public Product selectOne(Product e) {		return (Product) dao.selectOne("manage.product.selectOne", e);	}	public int delete(Product e) {		return dao.delete("manage.product.delete", e);	}	public int update(Product e) {		return dao.update("manage.product.update", e);	}	public int deletes(Long[] ids) {		Product e = new Product();		for (int i = 0; i < ids.length; i++) {			e.setId(ids[i]);			delete(e);		}		return 0;	}	public int insert(Product e) {		return dao.insert("manage.product.insert", e);	}	public int deleteById(long id) {		return dao.delete("manage.product.deleteById", id);	}	public Product selectById(Long id) {		return (Product) dao.selectOne("manage.product.selectById", id);	}			@Override	public void deleteAttributeLinkByProductID(long parseInt) {		dao.delete("manage.product.deleteAttributeLinkByProductID", parseInt);			}	@Override	public List<Product> selectStockByIDs(List<Long> productIDs) {		return dao.selectList("manage.product.selectStockByIDs",productIDs);	}	@Override	public int selectOutOfStockProductCount() {		return (Integer) dao.selectOne("manage.product.selectOutOfStockProductCount");	}	@Override	public void updateImg(Product p) {		dao.update("manage.product.updateImg",p);	}	@Override	public void updateProductStatus(Product p) {		dao.update("manage.product.updateProductStatus",p);	}	@Override	public void updateProductBindActivityId(Product pro) {		dao.update("manage.product.updateProductBindActivityId",pro);	}	@Override	public void updateResetThisProductActivityID(Long activityID) {		dao.update("manage.product.updateResetThisProductActivityID",activityID);	}	@Override	public void insertStock(ProductStockInfo stockInfo) {		dao.insert("manage.product.insertStock", stockInfo);	}	@Override	public void insertSellCount(ProductSellCount sellCount) {		dao.insert("manage.product.insertSellCount", sellCount);	}	@Override	public void insertHit(ProductHit hit) {		dao.insert("manage.product.insertHit", hit);	}		@Override	public void insertProductCatalog(ProductCatalogRela rela) {		dao.update("manage.product.insertProductCatalog", rela);	}		@Override	public void updateStock(ProductStockInfo stockInfo) {		dao.update("manage.product.updateStock", stockInfo);	}	@Override	public void updateSellCount(ProductSellCount sellCount) {		dao.update("manage.product.updateSellCount", sellCount);	}	@Override	public void updateHit(ProductHit hit) {		dao.update("manage.product.updateHit", hit);	}	@Override	public void deleteProductCatalog(long productId) {		dao.delete("manage.product.deleteProductCatalog", productId);	}	@Override	public List<ProductCatalogRela> selectProductCatalog(long productId) {		return dao.selectList("manage.product.selectProductCatalog", productId);	}	}