package net.jeeshop.services.manage.product.impl;import java.util.List;import net.jeeshop.core.ServersManager;import net.jeeshop.services.manage.product.ProductService;import net.jeeshop.services.manage.product.bean.Product;import net.jeeshop.services.manage.product.dao.ProductDao;import net.jeeshop.services.manage.spec.SpecService;import com.tuisitang.modules.shop.entity.ProductCatalogRela;import com.tuisitang.modules.shop.entity.ProductHit;import com.tuisitang.modules.shop.entity.ProductSellCount;import com.tuisitang.modules.shop.entity.ProductStockInfo;import com.tuisitang.modules.shop.entity.Spec;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class ProductServiceImpl extends ServersManager<Product> implements		ProductService {	private static final Logger logger = LoggerFactory.getLogger(ProductServiceImpl.class);	private ProductDao productDao;	private SpecService specService;	public SpecService getSpecService() {		return specService;	}	public void setSpecService(SpecService specService) {		this.specService = specService;	}	public void setProductDao(ProductDao productDao) {		this.productDao = productDao;	}		/**	 * 添加商品信息	 */	@Override	public void insert(Product e) {		super.insert(e);				insertProuductCatalog(e);				insertStock(e);		insertSellCount(e);		insertHit(e);		insertOrUpdateSpec(e);	}		/**	 * 添加点击数信息	 * @param e	 */	private void insertHit(Product e) {		ProductHit hit = new ProductHit(e.getId(), 0);		productDao.insertHit(hit);	}		/**	 * 添加产品目录	 * @param e	 */	private void insertProuductCatalog(Product e) {		if (!StringUtils.isBlank(e.getSelectCatalogIds())) {			for (String catalogId : e.getSelectCatalogIds().split(",")) {				ProductCatalogRela rela = new ProductCatalogRela();				rela.setCatalogId(Long.valueOf(catalogId.trim()));				rela.setProductId(e.getId());				productDao.insertProductCatalog(rela);			}		}	}		/**	 * 添加销售数量	 * @param e	 */	private void insertSellCount(Product e) {		ProductSellCount sellCount = new ProductSellCount(e.getId(), e.getSellcount());		productDao.insertSellCount(sellCount);	}	/**	 * 添加库存信息	 * @param e	 */	private void insertStock(Product e) {		ProductStockInfo stockInfo = new ProductStockInfo(e.getId(), e.getStock());		productDao.insertStock(stockInfo);	}	//	/**//	 * 更新点击数信息//	 * @param e//	 *///	private void updateHit(Product e) {//		ProductHit hit = new ProductHit(e.getId(), e.getHit());//		productDao.updateHit(hit);//	}	/**	 * 更新销售数量	 * @param e	 */	private void updateSellCount(Product e) {		ProductSellCount sellCount = new ProductSellCount(e.getId(), e.getSellcount());		productDao.updateSellCount(sellCount);	}	/**	 * 更新库存信息	 * @param e	 */	private void updateStock(Product e) {		ProductStockInfo stockInfo = new ProductStockInfo(e.getId(), e.getStock());		productDao.updateStock(stockInfo);	}	/**	 * 更新商品信息	 */	@Override	public void update(Product e) {		super.update(e);//		updateHit(e);		updateProductCatalog(e);		updateSellCount(e);		updateStock(e);		insertOrUpdateSpec(e);	}		private void updateProductCatalog(Product e) {		productDao.deleteProductCatalog(e.getId());		this.insertProuductCatalog(e);	}	/**	 * 添加产品库存	 * @param stockInfo	 */	public void insertStock(ProductStockInfo stockInfo) {		productDao.insertStock(stockInfo);	}		/**	 * 添加产品销售数量	 * @param stockInfo	 */	public void insertSellCount(ProductSellCount sellCount) {		productDao.insertSellCount(sellCount);	}		/**	 * 添加产品点击次数	 * @param stockInfo	 */	public void insertHit(ProductHit hit){		productDao.insertHit(hit);	}		/**	 * 更新产品库存	 * @param stockInfo	 */	public void updateStock(ProductStockInfo stockInfo) {		productDao.updateStock(stockInfo);	}		/**	 * 更新产品销售数量	 * @param stockInfo	 */	public void updateSellCount(ProductSellCount sellCount) {		productDao.updateSellCount(sellCount);	}		/**	 * 更新产品点击次数	 * @param stockInfo	 */	public void updateHit(ProductHit hit){		productDao.updateHit(hit);	}		private void insertOrUpdateSpec(Product e){		if(e.getSpecList()!=null && e.getSpecList().size()>0){			for(int i=0;i<e.getSpecList().size();i++){				logger.error("=======insertOrUpdateSpec.e.getSpecArray() = " + e.getSpecList().get(i));				Spec spec = e.getSpecList().get(i);								if(StringUtils.isBlank(spec.getSpecColor())){					continue;				}								spec.setProductID(e.getId());				if(spec.getId() == null){					specService.insert(spec);				}else{					specService.update(spec);				}			}		}else{			logger.error("=======insertOrUpdateSpec.e.getSpecArray() is null");		}		//		if(e.getSpecArray()!=null && e.getSpecArray().length>0){//			for(int i=0;i<e.getSpecArray().length;i++){//				logger.error("=======insertOrUpdateSpec.e.getSpecArray() = " + e.getSpecArray());//			}//		}else{//			logger.error("=======insertOrUpdateSpec.e.getSpecArray() is null");//		}//		specService.insertOrUpdateSpec(e);	}	/**	 * 批量删除商品	 * 包括:	 * 1、商品表数据。	 * 2、属性关联表数据。	 * 				3、商品图片。  这个不一定要删除，因为有可能同一张图片被多处引用了。	 * @param ids	 * @return	 */	public int deletes(Long[] ids) {		if (ids != null && ids.length > 0) {			for (int i = 0; i < ids.length; i++) {				Long id = ids[i];				logger.error("删除商品deleteById.id="+id);				if(id == null){					throw new NullPointerException();				}//				attributeDao.deleteById(Integer.parseInt(pid));//根据ID删除选择的属性								//根据PID删除选择属性下 的所有子属性//				attributeDao.deleteByPid(pid);								//删除attribute_link表的相关联的数据//				attribute_linkDao.de				//				attributeDao.deleteAllById(id);								productDao.deleteById(id);				productDao.deleteAttributeLinkByProductID(id);			}		}		return 0;	}	@Override	public void updateProductStatus(Long[] ids, int status,String updateAccount) {		if (ids == null || ids.length == 0) {			throw new NullPointerException("商品ID不能为空！");		}				if(StringUtils.isBlank(updateAccount)){			throw new NullPointerException("操作人账号不能为空！");		}		for (int i = 0; i < ids.length; i++) {			Product p = new Product();			p.setId(ids[i]);			p.setStatus(status);			p.setUpdateAccount(updateAccount);			productDao.updateProductStatus(p);		}	}	@Override	public List<Product> selectStockByIDs(List<Long> productIDs) {		return productDao.selectStockByIDs(productIDs);	}	@Override	public int selectOutOfStockProductCount() {		return productDao.selectOutOfStockProductCount();	}	@Override	public void updateImg(Product p) {		productDao.updateImg(p);	}	@Override	public void updateProductBindActivityId(Product pro) {		productDao.updateProductBindActivityId(pro);	}	@Override	public void updateResetThisProductActivityID(Long activityID) {		productDao.updateResetThisProductActivityID(activityID);	}}