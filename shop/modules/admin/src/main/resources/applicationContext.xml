<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"
	default-lazy-init="true">

	<description>Spring Configuration</description>

	<!-- 加载配置属性文件 -->
	<context:property-placeholder
		ignore-unresolvable="true" location="classpath*:/application.properties" />

	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。 -->
	<context:component-scan base-package="net.jeeshop,com.tuisitang.modules.shop"><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<bean id="springContextHolder" class="com.tuisitang.common.utils.SpringContextHolder" lazy-init="false"/>

	<!-- 配置MyBatis Transaction -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置 Annotation 驱动，定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<!-- MyBatis SqlSessionFactory 配置 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <property name="dataSource" ref="dataSource" />
		<property name="configLocation">
			<value>classpath:mybatis-config.xml</value>
		</property>
		<!-- <property name="mapperLocations" value="classpath*:/config/**/*.xml" /> -->
		<property name="mapperLocations" value="classpath*:/config/**/*.xml" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="typeAliasesPackage" value="com.tuisitang.modules.shop.entity" />
        
		<!-- 
		自动扫描entity目录, 省掉Configuration.xml里的手工配置
        <property name="typeAliasesPackage" value="com.tuisitang.modules.shop.entity" />
        显式指定Mapper文件位置
        <property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" /> -->
	</bean>
    
    <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.tuisitang.modules.shop" />
        <property name="annotationClass" value="com.tuisitang.modules.shop.dao.MyBatisRepository"/>
    </bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="remove*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config proxy-target-class="true">
		<aop:pointcut id="interceptorPointCuts"
			expression="execution(public * net.jeeshop.services.*.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
	</aop:config>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
         <property name="driverClassName" value="${jdbc.driver}" />
         <property name="url" value="${jdbc.url}" />
         <property name="username" value="${jdbc.username}" />
         <property name="password" value="${jdbc.password}" />
     </bean>
	
	<!-- SpyMemcached客户端 -->
	<bean id="spyMemcachedClient" class="com.tuisitang.common.cache.memcached.SpyMemcachedClient">
		<property name="memcachedClient">
			<bean class="net.spy.memcached.spring.MemcachedClientFactoryBean">
				<property name="servers" value="${memcached.servers}" />
				<!-- 默认是TEXT -->
				<property name="protocol" value="TEXT" />
				<!-- 默认是ARRAY_MOD -->
				<property name="locatorType" value="CONSISTENT" />
				<!-- 默认是2500毫秒 -->
				<property name="opTimeout" value="1000" />
			</bean>
		</property>
	</bean>

	<!-- base -->
	<import resource="strutsSpring/spring-base.xml"/>
	
	<!-- spring-services -->
	<import resource="strutsSpring/manage/spring-services.xml" />
	<!-- <import resource="strutsSpring/front/spring-services.xml" /> -->
	<import resource="strutsSpring/manage/spring-services-task.xml" />

	<!-- spring-struts -->
	<import resource="strutsSpring/manage/spring-struts.xml" />
	<!-- <import resource="strutsSpring/front/spring_struts.xml" /> -->
</beans>