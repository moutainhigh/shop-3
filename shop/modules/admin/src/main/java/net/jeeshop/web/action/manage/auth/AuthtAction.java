package net.jeeshop.web.action.manage.auth;import java.util.Date;import net.jeeshop.core.BaseAction;import net.jeeshop.services.manage.account.AccountService;import net.jeeshop.services.manage.auth.AuthService;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.tuisitang.common.cache.memcached.SpyMemcachedClient;import com.tuisitang.modules.shop.entity.Account;import com.tuisitang.modules.shop.entity.AccountRank;import com.tuisitang.modules.shop.entity.Authentication;/**     * @{#} AccountAction.java    *  * * <p>Copyright: Copyright(c) 2015 </p>  * <p>Company: TST</p> * @version 1.0 * @author <a href="mailto:paninxb@gmail.com">panin</a>    *   */public class AuthtAction extends BaseAction<Authentication> {	private static final Logger logger = LoggerFactory.getLogger(AuthtAction.class);	private static final long serialVersionUID = 1L;	private AuthService authService;	private AccountService accountService;	private SpyMemcachedClient spyMemcachedClient;		protected final String toAuth = "toAuth";//审核	protected void selectListAfter() {		pager.setPagerUrl("auth!selectList.action");	}	public void setAuthService(AuthService authService) {		this.authService = authService;	}		public Authentication getE() {		return this.e;	}	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Authentication();		}else{			e.clear();		}				super.initPageSelect();	}		public String toAuth() throws Exception {		Long authId = StringUtils.isBlank(getRequest().getParameter(				"authId")) ? null : new Long(getRequest().getParameter(				"authId"));		e.clear();		e.setId(authId);		e = getServer().selectOne(getE());		if (e == null) {			throw new NullPointerException("系统查询不到账号为" + authId + "的认证申请信息！");		}		return toAuth;	}		/**	 * 通过审核	 * @return	 * @throws Exception	 * 认证状态：		0 未认证		1 已经实名认证		2 已经企业认证		3 个人和企业认证成功	 */	public String passAuth() throws Exception {		if(e.getId() == null){			throw new NullPointerException("参数不能为空");		}		e.setStatus(2);		e.setAuthDate(new Date());				//更新账号信息		Account account = accountService.selectById(e.getAccountId());		if (account == null) {			throw new NullPointerException("审核账号不能为空");		}		//个人实名认证		if(e.getType() == 1) {			if (account.getAuthStatus() == 2) {				account.setAuthStatus(3);			} else  {				account.setAuthStatus(1);			} 			// 个人认证成功后，设置为R2			if (account.getRank().equals(AccountRank.RANK_CODE_R1)) {				account.setRank(AccountRank.RANK_CODE_R2);			}			account.setTrueName(e.getCardName());		} else if (e.getType() == 2) {			//企业实名认证			if (account.getAuthStatus() == 1) {				account.setAuthStatus(3);			} else {				account.setAuthStatus(2);			}			// 企业认证成功后，设置为R3			if (account.getRank().equals(AccountRank.RANK_CODE_R1) || account.getRank().equals(AccountRank.RANK_CODE_R2)) {				account.setRank(AccountRank.RANK_CODE_R3);			}		}		getServer().update(e);		accountService.update(account);		cleanAccountCache(account);		e.clear();		return super.selectList();	}		/**	 * 审核不通过	 * @return	 * @throws Exception	 * 	 * 0 未认证		1 已经实名认证		2 已经企业认证		3 个人和企业认证成功	 */	public String rejectAuth() throws Exception {		if(e.getId() == null){			throw new NullPointerException("参数不能为空");		}		e.setStatus(3);		e.setRejectDate(new Date());				//更新账号信息		getServer().update(e);		e.clear();		return super.selectList();	}			/**	 * 查询认证信息	 * @return	 * @throws Exception	 */	public String show() throws Exception {		Long authId = StringUtils.isBlank(getRequest().getParameter(				"authId")) ? null : new Long(getRequest().getParameter(				"authId"));		e.clear();		e.setId(authId);		e = getServer().selectOne(getE());		if (e == null) {			throw new NullPointerException("系统查询不到账号为" + authId + "的认证申请信息！");		}		return super.show;	}		/**	 * 审核会员认证信息	 * @return	 * @throws Exception	 */	public String auth() throws Exception {		Long accountId = StringUtils.isBlank(getRequest().getParameter(				"accountId")) ? null : new Long(getRequest().getParameter(				"accountId"));		String account = getRequest().getParameter("account");		if (StringUtils.isBlank(account) && accountId == null) {			throw new NullPointerException("账号不能为空！");		}		e.clear();		e.setId(accountId);//		e.setAccount(account);		e = getServer().selectOne(getE());		if (e == null) {			throw new NullPointerException("系统查询不到账号为" + account + "的用户信息！");		}		return toAuth;	}		//	public void insertAfter(Authentication e) {//		e.clear();//	}		/**	 * 冻结用户	 * @return	 * @throws Exception 	 */	public String updateFreeze() throws Exception {		logger.error("AccountAction.freeze id = " + e.getId());		if(e.getId() == null){			throw new NullPointerException("参数不能为空");		}				authService.update(e);				e.clear();		return super.selectList();	}		@Override	public void insertAfter(Authentication e) {			}	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}	public AccountService getAccountService() {		return accountService;	}	public SpyMemcachedClient getSpyMemcachedClient() {		return spyMemcachedClient;	}	public void setSpyMemcachedClient(SpyMemcachedClient spyMemcachedClient) {		this.spyMemcachedClient = spyMemcachedClient;	}		private void cleanAccountCache(Account account) {		if (account != null && account.getId() != null) {			spyMemcachedClient.delete(Account.getKey(account.getId()));			spyMemcachedClient.delete(Account.getKey(account.getMobile()));			if (!StringUtils.isBlank(account.getOpenId())) {				spyMemcachedClient.delete(Account.getKey(account.getOpenId()));			}		}	}	}