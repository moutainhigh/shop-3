package net.jeeshop.web.action.manage.account;import java.util.List;import java.util.Map;import net.jeeshop.core.BaseAction;import net.jeeshop.core.KeyValueHelper;import net.jeeshop.core.util.MD5;import net.jeeshop.services.manage.account.AccountService;import com.tuisitang.modules.shop.entity.Account;import net.jeeshop.services.manage.accountRank.AccountRankService;import com.tuisitang.modules.shop.entity.AccountRank;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.context.support.WebApplicationContextUtils;/**     * @{#} AccountAction.java    *  * 会员/账号Action * * <p>Copyright: Copyright(c) 2015 </p>  * <p>Company: TST</p> * @version 1.0 * @author <a href="mailto:paninxb@gmail.com">panin</a>    *   */public class AccountAction extends BaseAction<Account> {	private static final Logger logger = LoggerFactory.getLogger(AccountAction.class);	private static final long serialVersionUID = 1L;	private AccountService accountService;	private AccountRankService accountRankService;		protected final String toAuth = "toAuth";//审核//	private AreaService areaService;//	public void setAreaService(AreaService areaService) {//		this.areaService = areaService;//	}	protected void selectListAfter() {		pager.setPagerUrl("account!selectList.action");	}	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}		public void setAccountRankService(AccountRankService accountRankService) {		this.accountRankService = accountRankService;	}	public Account getE() {		return this.e;	}	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Account();		}else{			e.clear();		}				super.initPageSelect();	}		@Override	public String toEdit() throws Exception {		if(e.getId() != null) {			super.toEdit();		}				getKeyValue();		List<AccountRank> arList = accountRankService.selectList(null);		getRequest().setAttribute("arList", arList);//		e.setArList(arList);		return toEdit;	}	/**	 * 根据键获取值	 */	private void getKeyValue() {		if (StringUtils.isNotBlank(e.getAccountType())) {			e.setAccountTypeName(KeyValueHelper.get("account_accountType_" + e.getAccountType()));		} else {			e.setAccountTypeName("系统会员");		}		if (StringUtils.isNotBlank(e.getRank())) {			e.setRankName(KeyValueHelper.get("account_rank_" + e.getRank()));		}//		Map<String, String> arMap = KeyValueHelper.getMap("account_rank_");//		logger.info("KeyValue Map {}", arMap);	}		/**	 * 根据会员账号查询会员信息	 * @return	 * @throws Exception	 */	public String show() throws Exception {		Long accountId = StringUtils.isBlank(getRequest().getParameter(				"accountId")) ? null : new Long(getRequest().getParameter(				"accountId"));		String account = getRequest().getParameter("account");		if (StringUtils.isBlank(account) && accountId == null) {			throw new NullPointerException("账号不能为空！");		}		e.clear();		e.setId(accountId);		e.setAccount(account);		e = getServer().selectOne(getE());		if (e == null) {			throw new NullPointerException("系统查询不到账号为" + account + "的用户信息！");		}		getKeyValue();		return super.show;	}		public void insertAfter(Account e) {		e.clear();	}		/**	 * 重置会员密码，发送重置好的密码到会员邮箱	 * @return	 * @throws Exception	 */	public String czmm() throws Exception{		Account acc = new Account();		acc.setId(e.getId());		acc.setPassword(MD5.entryptPassword("111111"));		accountService.update(acc);		return selectList();	}		/**	 * 转到冻结页面	 * @return	 */	public String toFreeze() throws Exception {		logger.error("AccountAction.toFreeze id = " + e.getId());		if(e.getId() == null){			throw new NullPointerException("参数不能为空");		}				e = accountService.selectById(e.getId());		if(e==null){			throw new NullPointerException("根据用户ID查询不到用户信息");		}		return "freeze";	}		/**	 * 冻结用户	 * @return	 * @throws Exception 	 */	public String updateFreeze() throws Exception {		logger.error("AccountAction.freeze id = " + e.getId());		if(e.getId() == null){			throw new NullPointerException("参数不能为空");		}				accountService.update(e);				e.clear();		return super.selectList();	}		public String testUpdateScoure(){		logger.error("testUpdateScoure...");		WebApplicationContext app = WebApplicationContextUtils.getWebApplicationContext(getRequest().getSession().getServletContext());		net.jeeshop.services.front.account.AccountService accountServiceFront = (net.jeeshop.services.front.account.AccountService) app.getBean("accountServiceFront");		net.jeeshop.services.front.account.bean.Account acc = new net.jeeshop.services.front.account.bean.Account();		acc.setAccount("test1");		acc.setAddScore(1200);		accountServiceFront.updateScore(acc);		return null;	}	}