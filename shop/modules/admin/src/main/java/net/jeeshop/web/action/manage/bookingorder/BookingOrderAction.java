package net.jeeshop.web.action.manage.bookingorder;import java.io.File;import java.io.IOException;import java.util.Date;import java.util.List;import java.util.Map;import net.jeeshop.core.BaseAction;import net.jeeshop.core.ManageContainer;import net.jeeshop.core.oscache.FrontCache;import net.jeeshop.core.system.bean.User;import net.jeeshop.services.manage.area.AreaService;import net.jeeshop.services.manage.bookingorderlog.BookingOrderLogService;import net.jeeshop.services.manage.system.impl.UserService;import org.apache.commons.io.FileUtils;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.tuisitang.common.mapper.JsonMapper;import com.tuisitang.common.utils.DateUtils;import com.tuisitang.modules.shop.admin.event.BookingOrderDispatchEvent;import com.tuisitang.modules.shop.entity.Area;import com.tuisitang.modules.shop.entity.BookingOrder;import com.tuisitang.modules.shop.entity.BookingOrderLog;import com.tuisitang.modules.shop.utils.Global;/**     * @{#} BookingOrderAction.java    *  * 预约单Action *  * <p>Copyright: Copyright(c) 2015 </p>  * <p>Company: TST</p> * @version 1.0 * @author <a href="mailto:paninxb@gmail.com">panin</a>    */public class BookingOrderAction extends BaseAction<BookingOrder> {	/**	 * 	 */	private static final long serialVersionUID = 1L;	private static final Logger logger = LoggerFactory.getLogger(BookingOrderAction.class);	private List<User> userList = Lists.newArrayList();	private List<Area> provinces = Lists.newArrayList();	private List<Area> cities = Lists.newArrayList();	private List<Area> counties = Lists.newArrayList();//	private Long provinceId;//	private Long cityId;//	private Long countyId;	private BookingOrderLogService bookingOrderLogService;	private UserService userService;	private AreaService areaService;	public List<User> getUserList() {		return userList;	}	public void setUserList(List<User> userList) {		this.userList = userList;	}	public List<Area> getProvinces() {		return provinces;	}	public void setProvinces(List<Area> provinces) {		this.provinces = provinces;	}	public List<Area> getCities() {		return cities;	}	public void setCities(List<Area> cities) {		this.cities = cities;	}	public List<Area> getCounties() {		return counties;	}	public void setCounties(List<Area> counties) {		this.counties = counties;	}//	public Long getProvinceId() {//		return provinceId;//	}////	public void setProvinceId(Long provinceId) {//		this.provinceId = provinceId;//	}////	public Long getCityId() {//		return cityId;//	}////	public void setCityId(Long cityId) {//		this.cityId = cityId;//	}////	public Long getCountyId() {//		return countyId;//	}////	public void setCountyId(Long countyId) {//		this.countyId = countyId;//	}	public BookingOrderLogService getBookingOrderLogService() {		return bookingOrderLogService;	}	public void setBookingOrderLogService(			BookingOrderLogService bookingOrderLogService) {		this.bookingOrderLogService = bookingOrderLogService;	}	public UserService getUserService() {		return userService;	}	public void setUserService(UserService userService) {		this.userService = userService;	}	public AreaService getAreaService() {		return areaService;	}	public void setAreaService(AreaService areaService) {		this.areaService = areaService;	}	@Override	public BookingOrder getE() {		return this.e;	}	@Override	public void prepare() throws Exception {		if (this.e == null) {			this.e = new BookingOrder();		}		super.initPageSelect();	}	@Override	public String insert() throws Exception {		logger.error(">>>BookingOrderAction.insert");		getSession().setAttribute("insertOrUpdateMsg", "添加预约单成功！");		getServer().insert(getE());		Long id = e.getId();		logger.error(">>>BookingOrderAction.insert ,id = " + id);		e.clear();		getResponse().sendRedirect("bookingOrder!toEdit.action?e.id=" + id);		return null;	}	@Override	public void insertAfter(BookingOrder e) {		e.clear();	}	/**	 * 编辑	 */	@Override	public String toEdit() throws Exception {		getSession().setAttribute("insertOrUpdateMsg", "");// 列表页面进行编辑文章的时候,需要清空信息		return toEdit;	}	@Override	public String update() throws Exception {		getSession().setAttribute("insertOrUpdateMsg", "更新广告成功！");		Long id = e.getId();		super.update();		getResponse().sendRedirect("bookingOrder!toEdit2.action?e.id=" + id);		return null;	}	@Override	public String selectList() throws Exception {		super.selectList();		userList = userService.selectList(new User());		provinces = (List<Area>) getSession().getServletContext().getAttribute(Global.AREA_PROVINCE_ALL);		if (e.getProvinceId() != null) {			cities = areaService.selectAreaByParent(e.getProvinceId());		}		if (e.getCityId() != null) {			counties = areaService.selectAreaByParent(e.getCityId());		}		return toList;	}	@Override	protected void selectListAfter() {		pager.setPagerUrl("bookingOrder!selectList.action");	}	/**	 * 通过	 */	public String pass() throws IOException {		Date sysTime = new Date();		User user = (User) getRequest().getSession().getAttribute(ManageContainer.manage_session_user_info);		String id = getRequest().getParameter("id");		logger.info("id {}", id);		BookingOrder bookingOrder = new BookingOrder();		bookingOrder.setId(new Long(id));		bookingOrder.setStatus(BookingOrder.STATUS_AUDITED);		getServer().update(bookingOrder);		bookingOrderLogService.insert(new BookingOrderLog(new Long(id),				BookingOrderLog.ACTION_AUDIT, user.getNickname() + "于" + DateUtils.formatDate(sysTime, "yyyy/MM/dd HH:mm:ss")						+ "审核通过", user.getId(), user.getNickname(),				BookingOrderLog.OPERATE_TYPE_BACK));		JsonMapper mapper = JsonMapper.getInstance();		Map<String, Object> returnMap = Maps.newHashMap();		returnMap.put("isSuccess", true);		super.write(mapper.toJson(returnMap));		return null;	}		/**	 * 取消	 */	public String cancel() throws IOException {		Date sysTime = new Date();		User user = (User) getRequest().getSession().getAttribute(ManageContainer.manage_session_user_info);		String id = getRequest().getParameter("id");		String reasonId = getRequest().getParameter("reasonId");		String reason = getRequest().getParameter("reason");		String remark = getRequest().getParameter("remark");				logger.info("id {}, reasonId {}, reason {}, remark {}", id, reasonId, reason, remark);		BookingOrder bookingOrder = new BookingOrder();		bookingOrder.setId(new Long(id));		bookingOrder.setStatus(BookingOrder.STATUS_CANCEL);		bookingOrder.setReasonId(reasonId);		bookingOrder.setReason(reason);		bookingOrder.setRemark(remark);		getServer().update(bookingOrder);		bookingOrderLogService.insert(new BookingOrderLog(new Long(id),				BookingOrderLog.ACTION_CANCEL, 				user.getNickname() + "于" + DateUtils.formatDate(sysTime, "yyyy/MM/dd HH:mm:ss") + "取消订单，取消原因：" + reason, 				user.getId(), user.getNickname(), BookingOrderLog.OPERATE_TYPE_BACK));		JsonMapper mapper = JsonMapper.getInstance();		Map<String, Object> returnMap = Maps.newHashMap();		returnMap.put("isSuccess", true);		super.write(mapper.toJson(returnMap));		return null;	}		/**	 * 派单	 */	public String dispatch() throws IOException {		Date sysTime = new Date();		User user = (User) getRequest().getSession().getAttribute(ManageContainer.manage_session_user_info);		String id = getRequest().getParameter("id");		String userId = getRequest().getParameter("userId");		String username = getRequest().getParameter("username");		String time = getRequest().getParameter("time");		String remark = getRequest().getParameter("remark");		Date bookingTime = DateUtils.parseDate(time);				logger.info("id {}, userId {}, username {}, time {}, remark {}", id, userId, username, time, remark);		BookingOrder bookingOrder = new BookingOrder();		bookingOrder.setId(new Long(id));		bookingOrder.setStatus(BookingOrder.STATUS_DISPATCHED);		bookingOrder.setRemark(remark);		getServer().update(bookingOrder);		bookingOrder = getServer().selectById(new Long(id));		bookingOrderLogService.insert(new BookingOrderLog(new Long(id),				BookingOrderLog.ACTION_DISPATCH, 				user.getNickname() + "于" + DateUtils.formatDate(sysTime, "yyyy/MM/dd HH:mm:ss") + "安排人员" + username + "于" + time + "拜访客户", 				user.getId(), user.getNickname(), BookingOrderLog.OPERATE_TYPE_BACK));		JsonMapper mapper = JsonMapper.getInstance();		Map<String, Object> returnMap = Maps.newHashMap();		returnMap.put("isSuccess", true);		super.write(mapper.toJson(returnMap));		String content = "请于" + time + "拜访" + bookingOrder.getName() + "("				+ bookingOrder.getMobile() + ")客户，地址："				+ bookingOrder.getAddress();				publishEvent(new BookingOrderDispatchEvent(this, user.getId(), bookingTime, content));		return null;	}		/**	 * 查看预约单	 */	public String show(){		String id = getRequest().getParameter("id");		if(StringUtils.isBlank(id)){			throw new NullPointerException("非法请求！");		}		e.setId(new Long(id));		e = getServer().selectOne(e);				return super.show;	}		/**	 * 	 * @return	 * @throws IOException	 */	public String getArea() throws IOException {		JsonMapper mapper = JsonMapper.getInstance();		Long parentId = StringUtils.isBlank(getRequest().getParameter("parentId")) ? null 				: new Long(getRequest().getParameter("parentId"));		logger.info("parentId {}", parentId);		List<Area> areaList = areaService.selectAreaByParent(parentId);		String json = mapper.toJson(areaList);		logger.info("Area JSON {}", json);		super.write(json);		return null;	}	}