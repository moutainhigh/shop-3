package net.jeeshop.web.action.manage.order;import java.io.IOException;import java.util.Collections;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import net.jeeshop.core.BaseAction;import net.jeeshop.core.KeyValueHelper;import net.jeeshop.core.ManageContainer;import net.jeeshop.core.exception.UpdateOrderStatusException;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.system.bean.User;import net.jeeshop.services.manage.account.AccountService;import net.jeeshop.services.manage.express.ExpressService;import net.jeeshop.services.manage.order.bean.Order;import net.jeeshop.services.manage.orderdetail.OrderdetailService;import net.jeeshop.services.manage.orderdetailExpress.OrderdetailExpressService;import net.jeeshop.services.manage.orderlog.OrderlogService;import net.jeeshop.services.manage.orderpay.OrderpayService;import net.jeeshop.services.manage.ordership.OrdershipService;import net.jeeshop.services.manage.product.ProductService;import org.apache.commons.lang3.StringUtils;import org.slf4j.LoggerFactory;import com.alibaba.fastjson.JSON;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.tuisitang.common.service.ServiceException;import com.tuisitang.modules.shop.entity.Account;import com.tuisitang.modules.shop.entity.Area;import com.tuisitang.modules.shop.entity.Express;import com.tuisitang.modules.shop.entity.Orderdetail;import com.tuisitang.modules.shop.entity.OrderdetailExpress;import com.tuisitang.modules.shop.entity.Orderlog;import com.tuisitang.modules.shop.entity.Orderpay;import com.tuisitang.modules.shop.entity.Ordership;import com.tuisitang.modules.shop.entity.Supplier;import com.tuisitang.modules.shop.service.SupplierService;/** * 订单管理 *  * @author jqsl2012@163.com *  */public class OrderAction extends BaseAction<Order> {	private static final org.slf4j.Logger logger = LoggerFactory.getLogger(OrderAction.class);	private static final long serialVersionUID = 1L;//	private OrderService orderServiceManage;	private OrderpayService orderpayService;	private OrdershipService ordershipService;	private OrderdetailService orderdetailService;	private ProductService productService;	private OrderlogService orderlogService;	private AccountService accountService;		private SupplierService supplierService;	private ExpressService expressService;	private OrderdetailExpressService orderdetailExpressService;	//	private Order order;	private List<Orderdetail> orderdetailList;//订单项列表	private String optionMsg;//操作消息提示	private List<Area> areaList;//区域列表	private List<Account> accounts = Lists.newArrayList();// 用户列表		private List<Supplier> suppliers = Lists.newArrayList();// 供应商	private List<Express> expressList = Lists.newArrayList();		public List<Area> getAreaList() {		return areaList;	}	public void setAreaList(List<Area> areaList) {		this.areaList = areaList;	}	public OrderlogService getOrderlogService() {		return orderlogService;	}	public void setOrderlogService(OrderlogService orderlogService) {		this.orderlogService = orderlogService;	}	public String getOptionMsg() {		return optionMsg;	}	public void setOptionMsg(String optionMsg) {		this.optionMsg = optionMsg;	}	public OrdershipService getOrdershipService() {		return ordershipService;	}	public void setOrdershipService(OrdershipService ordershipService) {		this.ordershipService = ordershipService;	}	public OrderpayService getOrderpayService() {		return orderpayService;	}	public void setOrderpayService(OrderpayService orderpayService) {		this.orderpayService = orderpayService;	}	public ProductService getProductService() {		return productService;	}	public void setProductService(ProductService productService) {		this.productService = productService;	}	public OrderdetailService getOrderdetailService() {		return orderdetailService;	}	public void setOrderdetailService(OrderdetailService orderdetailService) {		this.orderdetailService = orderdetailService;	}	public ExpressService getExpressService() {		return expressService;	}	public void setExpressService(ExpressService expressService) {		this.expressService = expressService;	}	public OrderdetailExpressService getOrderdetailExpressService() {		return orderdetailExpressService;	}	public void setOrderdetailExpressService(			OrderdetailExpressService orderdetailExpressService) {		this.orderdetailExpressService = orderdetailExpressService;	}	public List<Orderdetail> getOrderdetailList() {		return orderdetailList;	}	public void setOrderdetailList(List<Orderdetail> orderdetailList) {		this.orderdetailList = orderdetailList;	}	protected void selectListAfter() {		pager.setPagerUrl("order!selectList.action");	}	public AccountService getAccountService() {		return accountService;	}	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}	public SupplierService getSupplierService() {		return supplierService;	}	public void setSupplierService(SupplierService supplierService) {		this.supplierService = supplierService;	}	public List<Account> getAccounts() {		return accounts;	}	public void setAccounts(List<Account> accounts) {		this.accounts = accounts;	}	public List<Supplier> getSuppliers() {		return suppliers;	}	public void setSuppliers(List<Supplier> suppliers) {		this.suppliers = suppliers;	}	public List<Express> getExpressList() {		return expressList;	}	public void setExpressList(List<Express> expressList) {		this.expressList = expressList;	}	public Order getE() {		return this.e;	}	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Order();		}		super.initPageSelect();		//		if(areaList!=null){//			for(int i=0;i<areaList.size();i++){//				areaList.get(i).clear();//			}//			areaList.clear();//			areaList = null;//		}	}	public void insertAfter(Order e) {		e.clear();	}		/**	 * 加载订单列表	 */	public String selectList() throws Exception {		logger.error("selectList()...");		super.selectList();		accounts = accountService.selectList(new Account());		if (pager.getList() != null) {			// 订单状态中文化显示。			for (int i = 0; i < pager.getList().size(); i++) {				Order item = (Order) pager.getList().get(i);				item.setStatusStr(KeyValueHelper.get("order_status_" + item.getStatus()));				item.setPaystatusStr(KeyValueHelper.get("order_paystatus_" + item.getPaystatus()));			}		}				return toList;	}		/**	 * 退款管理、退货管理 页面必须直接显示与退款、退款状态相一致的数据	 */	@Override	protected void setParamWhenInitQuery() {		String refundStatus = getRequest().getParameter("refundStatus");		String status = getRequest().getParameter("status");		String paystatus = getRequest().getParameter("paystatus");//		String notCancel = getRequest().getParameter("notCancel");		logger.error("refundStatus="+refundStatus+",status="+status+",paystatus="+paystatus);				if(StringUtils.isNotBlank(refundStatus)){			e.setRefundStatus(refundStatus);		}		if(StringUtils.isNotBlank(status)){			e.setStatus(status);		}		if(StringUtils.isNotBlank(paystatus)){			e.setPaystatus(paystatus);		}	}		/**	 * 订单打印功能	 * @return	 * @throws Exception	 */	public String toPrint() throws Exception {		if(e.getId()==null){			throw new NullPointerException("订单ID不能为空！");		}				//加载指定的订单信息		e = getServer().selectById(e.getId());				//加载收货人地址信息		Ordership ordership = new Ordership();		ordership.setOrderid(e.getId());		ordership = ordershipService.selectOne(ordership);		if(ordership==null){			throw new NullPointerException("系统查询不到收货人地址信息！");		}		e.setOrdership(ordership);				//加载订单项列表 以及 产品信息		Orderdetail orderdetail = new Orderdetail();		orderdetail.setOrderID(e.getId());		orderdetailList = orderdetailService.selectList(orderdetail);		if(orderdetailList==null){			throw new NullPointerException("查询不到订单明细信息！");		}		e.setOrderdetail(orderdetailList);		return "toPrint";	}		/**	 * 查看订单详细信息	 */	public String toEdit() throws Exception {		if(e.getId() == null){			throw new NullPointerException("订单ID不能为空！");		}				//加载指定的订单信息		e = getServer().selectOne(getE());		if(e==null){			throw new NullPointerException("根据订单ID查询不到订单！");		}				//订单各种状态 中文化。这样做是为了考虑到以后国际化的需要		if(StringUtils.isNotBlank(e.getStatus())){			e.setStatusStr(KeyValueHelper.get("order_status_"+e.getStatus()));		}		if(StringUtils.isNotBlank(e.getRefundStatus())){			e.setRefundStatusStr(KeyValueHelper.get("order_refundStatus_"+e.getRefundStatus()));		}		if(StringUtils.isNotBlank(e.getPaystatus())){			e.setPaystatusStr(KeyValueHelper.get("order_paystatus_"+e.getPaystatus()));		}				//加载支付记录		Orderpay orderpay = new Orderpay();		orderpay.setOrderid(e.getId());		e.setOrderpayList(orderpayService.selectList(orderpay));		if(e.getOrderpayList()!=null){			for(int i=0;i<e.getOrderpayList().size();i++){				Orderpay orderpayInfo = e.getOrderpayList().get(i);				String paymethod = KeyValueHelper.get("orderpay_paymethod_"+orderpayInfo.getPaymethod());				orderpayInfo.setPaymethod(paymethod);			}		}				//加载订单配送记录		e.setOrdership(ordershipService.selectOne(new Ordership(e.getId())));				//加载订单项列表 以及 产品信息		Orderdetail orderdetail = new Orderdetail();		orderdetail.setOrderID(getE().getId());		orderdetailList = orderdetailService.selectList(orderdetail);		if (orderdetailList == null || orderdetailList.size() == 0) {			throw new NullPointerException("订单数据异常，订单未包含任何订单项数据！");		}		e.setOrderdetail(orderdetailList);		// 检查此订单是否含赠品		for (Orderdetail od : e.getOrderdetail()) {			if ("y".equals(e.getPaystatus())) {				OrderdetailExpress ode = new OrderdetailExpress();				ode.setOrderdetailId(od.getId());				od.setOdeList(orderdetailExpressService.selectList(ode));			}			if (od.getGiftID() != null) {				e.setHasGift(true);			}		}				//加载订单支付日志记录		if(e.getId() != null){			e.setOrderlogs(orderlogService.selectList(new Orderlog(e.getId())));			if(e.getOrderlogs()==null){				e.setOrderlogs(Collections.EMPTY_LIST);			}			logger.error(">>>orderlogs.size="+e.getOrderlogs().size());		}				//加载供应商		if ("y".equals(e.getPaystatus())) {			suppliers = supplierService.findAllSupplier();			expressList = expressService.selectList(new Express());		}				return toEdit;	}		/**	 * 后台添加订单支付记录	 * @return	 * @throws Exception 	 */	public String insertOrderpay() throws Exception {		logger.error(">>>addOrderpay...orderid="+e.getId());		if(e.getId() == null){			throw new NullPointerException(ManageContainer.OrderAction_param_null);		}				checkStatus1();				e.getOrderpay().setOrderid(e.getId());//订单ID		e.getOrderpay().setTradeNo("tradeNoTest");		e.getOrderpay().setPaystatus(Orderpay.orderpay_paystatus_y);//假设支付成功		orderpayService.insert(e.getOrderpay());		getRequest().getSession().setAttribute("optionMsg", "添加支付记录成功！");				insertOrderlog(e.getId(),"【增加支付记录】增"+e.getOrderpay().getPayamount()+"￥;");				Order oInfo = new Order();		oInfo.setId(e.getId());		oInfo.setPaystatus(Order.order_paystatus_y);//全额支付		getServer().update(oInfo);				toEdit2();		return null;	}		/**	 * 刷新指定订单的信息	 * @throws IOException	 */	private void toEdit2() throws IOException {		getResponse().sendRedirect("order!toEdit.action?e.id="+e.getId());	}		/**	 * 设置订单为审核通过	 * @return	 * @throws IOException 	 */	public String updateOrderStatus() throws IOException{		logger.error("updateOrderStatus id = "+e.getId()+",status="+e.getStatus());		if(e.getId() == null || StringUtils.isBlank(e.getStatus())){			throw new NullPointerException(ManageContainer.OrderAction_param_null);		}				Order orderInfo = getServer().selectById(e.getId());		if(orderInfo==null){			throw new UpdateOrderStatusException(ManageContainer.OrderAction_selectById_null);		}				/**		 * 订单流程控制		 */		if(e.getStatus().equals(Order.order_status_cancel)){			if(!(orderInfo.getStatus().equals(Order.order_status_init) 					|| orderInfo.getStatus().equals(Order.order_status_pass))){				throw new NullPointerException(ManageContainer.OrderAction_updatePayMonery_cancel);			}		}				if(orderInfo.getStatus().equals(Order.order_status_cancel)){//已取消的订单不能再进行任何操作了			throw new NullPointerException(ManageContainer.OrderAction_updateOrderStatus_alreadyCancel);		}else{			/*			 * 未被取消的订单的状态只能往前推进，不可后撤。,撤销不需要检查			 */			if (!e.getStatus().equals(Order.order_status_cancel)) {				if(orderInfo.getStatus().equals(Order.order_status_init)){					if(!e.getStatus().equals(Order.order_status_pass)){						throw new RuntimeException(ManageContainer.OrderAction_updateOrderStatus_statusException);					}				}else if(orderInfo.getStatus().equals(Order.order_status_pass)){					if(!e.getStatus().equals(Order.order_status_send)){						throw new RuntimeException(ManageContainer.OrderAction_updateOrderStatus_statusException);					}				}else if(orderInfo.getStatus().equals(Order.order_status_send)){					if(!e.getStatus().equals(Order.order_status_sign)){						throw new RuntimeException(ManageContainer.OrderAction_updateOrderStatus_statusException);					}				}else if(orderInfo.getStatus().equals(Order.order_status_sign)){					if(!e.getStatus().equals(Order.order_status_file)){						throw new RuntimeException(ManageContainer.OrderAction_updateOrderStatus_statusException);					}				}			}		}				if(e.getStatus().equals(Order.order_status_send)){//			if(orderInfo.getStatus().equals(Order.order_status_pass)){//				//非法请求//				throw new NullPointerException(ManageContainer.RoleAction_update_error);//			}			//检查此订单是否【已发货】。如果已经发货，则直接跳转到订单明细接口。			if(StringUtils.isNotBlank(orderInfo.getExpressNo())){				toEdit2();				return null;			}						/**			 * 转到发货页面			 *///			Orderpay orderpay = new Orderpay();//			orderpay.setOrderid(e.getId());//			orderpay.setPaystatus(Orderpay.orderpay_paystatus_y);//			orderpay = orderpayService.selectOne(orderpay);//			//检查订单是否已经支付成功//			if(orderpay==null || StringUtils.isBlank(orderpay.getTradeNo())){//				//非法请求//				throw new NullPointerException(ManageContainer.RoleAction_update_error);//			}//			e.setTradeNo(orderpay.getTradeNo());						/*			 * 转到发货页面==》请求支付宝发货接口，如果成功支付宝会将此订单的状态设置为【已发货】			 * ***注意：如果是财付通或其他的支付接口，则需要调对应的发货接口才行。			 */			return "toSendProduct";		}				//修改订单状态		Order order = new Order();		order.setStatus(e.getStatus());		order.setId(e.getId());		getServer().update(order);				//记录日志		if(e.getStatus().equals(Order.order_status_pass)){			insertOrderlog(e.getId(),"【审核通过】");		}else if(e.getStatus().equals(Order.order_status_send)){			insertOrderlog(e.getId(),"【已发货】");		}else if(e.getStatus().equals(Order.order_status_sign)){			insertOrderlog(e.getId(),"【已签收】");		}else if(e.getStatus().equals(Order.order_status_file)){			insertOrderlog(e.getId(),"【已归档】");		}else if(e.getStatus().equals(Order.order_status_cancel)){			insertOrderlog(e.getId(),"【取消订单】");		}				toEdit2();		return null;	}	/**	 * 插入订单操作日志	 * @param orderid	订单ID	 * @param content	日志内容	 */	private void insertOrderlog(Long orderid,String content) {		User user = (User)getRequest().getSession().getAttribute(ManageContainer.manage_session_user_info);		Orderlog orderlog = new Orderlog();		orderlog.setOrderid(orderid);//订单ID//		orderlog.setAccountId(user.getUsername());//操作人账号		orderlog.setAccountId(user.getId());		orderlog.setAccount(user.getUsername());		orderlog.setContent(content);//日志内容		orderlog.setAccountType(Orderlog.orderlog_accountType_m);		orderlogService.insert(orderlog);	}	/**	 * 设置订单为取消	 * @return	 * @throws IOException 	 *///	public String cancel() throws IOException{//		if(e.getId() == null){//			throw new NullPointerException();//		}//		//		Order order = new Order();//		order.setStatus(Order.order_status_cancel);//		order.setId(e.getId());//		orderService.update(order);//		//		insertOrderlog(e.getId(),"【取消订单】");//		//		toEdit2();//		return null;//	}		/**	 * 设置订单为已发货	 * @return	 * @throws IOException 	 *///	public String setSend() throws IOException{//		if(e.getId() == null){//			throw new NullPointerException();//		}//		//		Order order = new Order();//		order.setStatus(Order.order_status_send);//		order.setId(e.getId());//		orderService.update(order);//		//		insertOrderlog(e.getId(),"【已发货】");//		//		toEdit2();//		return null;//	}		/**	 * 设置订单为已签收	 * @return	 * @throws IOException 	 *///	public String setSign() throws IOException{//		if(e.getId() == null){//			throw new NullPointerException();//		}//		//		Order order = new Order();//		order.setStatus(Order.order_status_sign);//		order.setId(e.getId());//		orderService.update(order);//		//		insertOrderlog(e.getId(),"【已签收】");//		//		toEdit2();//		return null;//	}		/**	 * 设置订单为已归档	 * @return	 * @throws IOException 	 *///	public String setFile() throws IOException{//		if(e.getId() == null){//			throw new NullPointerException();//		}//		//		Order order = new Order();//		order.setStatus(Order.order_status_file);//		order.setId(e.getId());//		orderService.update(order);//		//		insertOrderlog(e.getId(),"【已归档】");//		//		toEdit2();//		return null;//	}		/**	 * 修改订单的各种状态	 * @return	 * @throws Exception	 *///	@Deprecated//	public String changeOrderStatus() throws Exception {//		logger.error(">>>changeOrderStatus...");////		String aaa = getRequest().getParameter("aaa");////		log.error(">>>changeOrderStatus...aaa="+this.aaa);//		return null;//	}	/**	 * 后台修改订单总金额	 * @return	 * @throws Exception	 */	public String updatePayMonery() throws Exception {		checkStatus1();		logger.error("updatePayMonery = id = " + e.getId() + ",amount = " + e.getAmount());		User user = (User)getRequest().getSession().getAttribute(ManageContainer.manage_session_user_info);		((net.jeeshop.services.manage.order.OrderService)getServer()).updatePayMonery(e, user.getId(), user.getUsername());		toEdit2();		return null;	}	/**	 * 后台编辑订单页面，添加支付记录、修改订单总金额 操作之前需要进行如下的判断，这2个按钮的操作必须是订单为未审核 且 订单未支付 才可以，否则抛出异常。	 */	private void checkStatus1() {		Order orderInfo = getServer().selectById(e.getId());		if(orderInfo==null){			throw new NullPointerException(ManageContainer.OrderAction_selectById_null);		}				/**		 * 订单流程控制		 */		if(!orderInfo.getStatus().equals(Order.order_status_init)){			throw new UpdateOrderStatusException(ManageContainer.OrderAction_updatePayMonery_update);		}				if(!orderInfo.getPaystatus().equals(Order.order_paystatus_n)){			throw new UpdateOrderStatusException("未支付的订单才支持此操作！");		}	}		/**	 * 查询订单的配送地址信息-->然后后台工作人员可以进行修改	 * @return	 */	public String selectOrdership(){		Long orderid = StringUtils.isBlank(getRequest().getParameter("orderid")) ? null : new Long(getRequest().getParameter("orderid"));		if(orderid == null){			throw new NullPointerException("非法请求！");		}				Ordership ordership = new Ordership();		ordership.setOrderid(orderid);		ordership = ordershipService.selectOne(ordership);		if(ordership==null){			throw new NullPointerException("根据订单ID查询不到该订单的配送信息！");		}				e.setOrdership(ordership);		e.setId(orderid);				//获取区域列表//		if(StringUtils.isNotBlank(ordership.getArea())){////					address.getArea()//			com.tuisitang.modules.shop.entity.Area area = SystemManager.areaMap.get(ordership.getProvinceCode());//			if(area!=null && area.getChildren()!=null && area.getChildren().size()>0){//				for(int i=0;i<area.getChildren().size();i++){//					com.tuisitang.modules.shop.entity.Area city = area.getChildren().get(i);//					if(city.getCode().equals(ordership.getCityCode())){//						////						logger.error("address.getCity()="+address.getCity());////						logger.error(city.toString());////						address.setAreaList(city.getChildren());//						areaList = city.getChildren();//						break;//					}//				}//			}//		}				return "selectOrdership";	}		/**	 * 修改订单配送地址信息	 * @return	 * @throws IOException 	 */	public String updateOrdership() throws IOException{		logger.error("updateOrdership...");		if(StringUtils.isBlank(e.getOrdership().getShipname())){			throw new NullPointerException("收货人不能为空！");		}else if(StringUtils.isBlank(e.getOrdership().getShipaddress())){			throw new NullPointerException("收货人街道地址不能为空！");		}else if(StringUtils.isBlank(e.getOrdership().getTel())){			throw new NullPointerException("收货人手机号码！");		}else if(StringUtils.isBlank(e.getOrdership().getProvinceCode())){			throw new NullPointerException("省份人不能为空！");		}else if(StringUtils.isBlank(e.getOrdership().getCityCode())){			throw new NullPointerException("城市人不能为空！");		}				if(e.getId() == null){			throw new NullPointerException(ManageContainer.OrderAction_param_null);		}				Order order = getServer().selectById(e.getId());		if(order==null){			throw new NullPointerException("查询不到订单信息!");		}				if(!order.getStatus().equals(Order.order_status_init)){			throw new RuntimeException("只有【未审核】的订单才能修改收货人配送地址信息!");		}						ordershipService.update(e.getOrdership());				toEdit2();		return null;	}	/**	 * 根据省份编码获取城市列表	 * @return	 * @throws IOException 	 */	public String selectCitysByProvinceCode() throws IOException{		logger.error("selectCitysByProvinceCode...");		String provinceCode = getRequest().getParameter("provinceCode");		logger.error("selectCitysByProvinceCode...provinceCode="+provinceCode);		if(StringUtils.isBlank(provinceCode)){			throw new NullPointerException("provinceCode is null");		}				if(SystemManager.topArea!=null){			List<Area> result = null;			for (Area a : SystemManager.topArea.getChildren()) {				if (provinceCode.equals(a.getCode())) {					result = a.getChildren();				}			}						if(result!=null && !result.isEmpty()){				String jsonStr = JSON.toJSONString(result);				logger.error("jsonStr="+jsonStr);				super.utf8JSON();				getResponse().getWriter().write(jsonStr);				return null;			}		}				getResponse().getWriter().write("{}");		return null;	}	/**	 * 根据城市编码获取区域列表	 * @return	 * @throws IOException 	 */	public String selectAreaListByCityCode() throws IOException{		logger.error("selectAreaListByCityCode...");		String provinceCode = getRequest().getParameter("provinceCode");		String cityCode = getRequest().getParameter("cityCode");		logger.error("selectAreaListByCityCode...provinceCode="+provinceCode+",cityCode="+cityCode);		if(StringUtils.isBlank(provinceCode) || StringUtils.isBlank(cityCode)){			throw new NullPointerException("provinceCode or cityCode is null");		}				if(SystemManager.topArea!=null){			List<Area> result = null;			for (Area a : SystemManager.topArea.getChildren()) {				if (provinceCode.equals(a.getCode())) {					for (Area area : a.getChildren()) {						if (area.getCode().equals(cityCode)) {							result = area.getChildren();						}					}				}			}						if(result!=null && !result.isEmpty()){				String jsonStr = JSON.toJSONString(result);				logger.error("jsonStr="+jsonStr);				super.utf8JSON();				getResponse().getWriter().write(jsonStr);				return null;			}		}				getResponse().getWriter().write("{}");		return null;	}		/**	 * 保存OrderdetailExpress	 */	public String saveExpress() throws IOException {		Map<String,Object> returnMap = Maps.newHashMap();		boolean isSuccess = true;		String msg = "";		try {			HttpServletRequest request = getRequest();			Long orderdetailId = StringUtils.isBlank(request.getParameter("orderdetailId")) ? null : new Long(request.getParameter("orderdetailId"));			Long id = StringUtils.isBlank(request.getParameter("id")) ? null : new Long(request.getParameter("id"));			String mode = request.getParameter("mode");			String expressType = request.getParameter("expressType");			String expressCompanyName = request.getParameter("expressCompanyName");			String expressNo = request.getParameter("expressNo");			double expressFee = StringUtils.isBlank(request.getParameter("expressFee")) ? null : new Double(request.getParameter("expressFee"));						logger.info("orderdetailId {}\nid {}\n mode {}\n expressType {}\n expressCompanyName {}\n expressNo {}",					orderdetailId, id, mode, expressType, expressCompanyName,					expressNo);				if (orderdetailId == null) {				throw new ServiceException("订单详细编码为空！");			}			if (StringUtils.isBlank(mode)) {				throw new ServiceException("Mode为空！");			}			if (StringUtils.isBlank(expressType)) {				throw new ServiceException("物流方式为空！");			}			if (StringUtils.isBlank(expressCompanyName)) {				throw new ServiceException("物流公司为空！");			}			if (expressFee <= 0) {				throw new ServiceException("物流费用小于0！");			}						OrderdetailExpress ode = new OrderdetailExpress();				if (id != null) {				ode = orderdetailExpressService.selectById(id);			}						ode.setOrderdetailId(orderdetailId);			ode.setMode(mode);			ode.setExpressType(expressType);			ode.setExpressCompanyName(expressCompanyName);			ode.setExpressNo(expressNo);			ode.setExpressFee(expressFee);				if (id == null) {				orderdetailExpressService.insert(ode);			} else {				orderdetailExpressService.update(ode);			}				} catch (Throwable e) {			e.printStackTrace();			isSuccess = false;			msg = e.getMessage();		}		returnMap.put("isSuccess", isSuccess);		returnMap.put("msg", msg);				getResponse().getWriter().write(JSON.toJSONString(returnMap));		//		if(SystemManager.topArea!=null){//			List<Area> result = null;//			for (Area a : SystemManager.topArea.getChildren()) {//				if (provinceCode.equals(a.getCode())) {//					result = a.getChildren();//				}//			}//			//			if(result!=null && !result.isEmpty()){//				String jsonStr = JSON.toJSONString(result);//				logger.error("jsonStr="+jsonStr);//				super.utf8JSON();//				getResponse().getWriter().write(jsonStr);//				return null;//			}//		}//		//		getResponse().getWriter().write("{}");		return null;	}		/**	 * 保存Supplier	 */	public String saveSupplier() throws IOException {		Map<String,Object> returnMap = Maps.newHashMap();		boolean isSuccess = true;		String msg = "";		try {			HttpServletRequest request = getRequest();			Long orderdetailId = StringUtils.isBlank(request.getParameter("orderdetailId")) ? null : new Long(request.getParameter("orderdetailId"));			Long supplierId = StringUtils.isBlank(request.getParameter("supplierId")) ? null : new Long(request.getParameter("supplierId"));			String supplierName = request.getParameter("supplierName");						logger.info("orderdetailId {}\nsupplierId {}\n supplierName {}", orderdetailId, supplierId, supplierName);				if (orderdetailId == null) {				throw new ServiceException("订单详细编码为空！");			}			if (supplierId == null || StringUtils.isBlank(supplierName)) {				throw new ServiceException("供应商为空为空！");			}						Orderdetail od = orderdetailService.selectById(orderdetailId);			if (od == null) {				throw new ServiceException("订单详情为空！");			}			od.setSupplierId(supplierId);			od.setSupplierName(supplierName);			orderdetailService.update(od);		} catch (Throwable e) {			e.printStackTrace();			isSuccess = false;			msg = e.getMessage();		}		returnMap.put("isSuccess", isSuccess);		returnMap.put("msg", msg);				getResponse().getWriter().write(JSON.toJSONString(returnMap));				return null;	}	}