package net.jeeshop.web.action.manage.catalog;import java.io.IOException;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.Iterator;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Map.Entry;import net.jeeshop.core.BaseAction;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.util.PinYinUtil;import net.jeeshop.services.manage.catalog.CatalogService;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.google.common.collect.Lists;import com.tuisitang.common.mapper.JsonMapper;import com.tuisitang.modules.shop.entity.Catalog;/** * 商品分类,可以无限极分类 *  * @author huangf *  */public class CatalogAction extends BaseAction<Catalog> {	private static final Logger logger = LoggerFactory.getLogger(CatalogAction.class);	private static final long serialVersionUID = 1L;	private CatalogService catalogService;	public CatalogService getCatalogService() {		return catalogService;	}	protected void selectListAfter() {		pager.setPagerUrl("catalog!selectList.action");	}	public void setCatalogService(CatalogService catalogService) {		this.catalogService = catalogService;	}	public Catalog getE() {		return this.e;	}	public void prepare() throws Exception {		if (this.e == null) {			this.e = new Catalog();		}	}	public void insertAfter(Catalog e) {	}	@Override	public String selectList() throws Exception {		String type = e.getType();		super.initPageSelect();		e.setType(type);		logger.error("CatalogAction.selectList.e.type=" + e.getType());		return toList;	}	/**	 * 递归查询数据库获取商品目录	 * 返回tree的数据结构 从PID=0开始加载菜单资源 获取指定节点的全部子菜单（包括当前菜单节点）	 * 	 * @return	 * @throws Exception	 */	public String getRoot() throws Exception {		JsonMapper mapper = JsonMapper.getInstance();		List<Catalog> root = catalogService.loadRoot(getE());		String jsonStr = mapper.toJson(root);		try {			getResponse().getWriter().write(jsonStr);		} catch (Exception e) {			e.printStackTrace();		}		return null;	}	/**	 * 数据来自缓存	 * 返回适合easyui.treegrid的JSON的数据结构 从PID=0开始加载菜单资源 获取指定节点的全部子菜单（包括当前菜单节点）	 * 	 * @return	 * @throws Exception	 */	public String getRootWithTreegrid() throws Exception {		logger.error(">>>getRootWithTreegrid type = " + e.getType());		JsonMapper mapper = JsonMapper.getInstance();		List<Catalog> root = null;		if (e.getType().equals("p")) {			// 直接使用缓存数据			if (SystemManager.productCatalogJsonStr != null) {				super.write(SystemManager.productCatalogJsonStr);				return null;			}			root = SystemManager.catalogs;			SystemManager.productCatalogJsonStr = mapper.toJson(root);			super.write(SystemManager.productCatalogJsonStr);						return null;		} else if (e.getType().equals("a")) {			// 直接使用缓存数据			if (SystemManager.articleCatalogJsonStr != null) {				super.write(SystemManager.articleCatalogJsonStr);				return null;			}			root = SystemManager.catalogsArticle;			SystemManager.articleCatalogJsonStr = mapper.toJson(root);			super.write(SystemManager.articleCatalogJsonStr);			return null;		} else {			throw new IllegalAccessError("参数异常。");		}	}	/**	 * 根据ID删除指定的目录,如果该类目下面有子类目,则会一并删除;如果该类目下面有商品,则会一并删除	 * 	 * @return	 * @throws Exception	 */	public String deleteByID() throws Exception {		String id = getRequest().getParameter("id");		if (StringUtils.isBlank(id)) {			throw new NullPointerException("参数不正确！");		}				boolean isSuccess = catalogService.deleteByID(new Long(id));		logger.error("isSuccess=" + isSuccess);		reset();		super.write(String.valueOf(isSuccess));		return null;	}		/**	 * 添加/修改/删除 某一个类别后，需要重新加载缓存数据。并且清除JSON字符串缓存，以便重新生成新的。	 * @throws Exception	 */	private void reset() throws Exception{		SystemManager.productCatalogJsonStr = null;		SystemManager.articleCatalogJsonStr = null;		SystemManager.catalogs = loadCatalogsByType();	}		/**	 * 原来递归的方式修改为非递归方式。	 * 非递归方法查询商品/文章目录结构，并且自动排序。	 * @param type	 * @param catalogs	 */	private List<Catalog> loadCatalogsByType(){		Catalog cc = new Catalog();		cc.setType("p");		List<Catalog> catalogsList = catalogService.selectList(cc);		List<Catalog> catalogs = Lists.newLinkedList();		if(catalogsList!=null){			Map<Long, Catalog> map = new HashMap<Long, Catalog>();			//生成一级目录Map数据			for(Iterator<Catalog> it = catalogsList.iterator();it.hasNext();){				Catalog item = it.next();				if(Catalog.isMainCatalog(item.getPid())){					map.put(item.getId(), item);					it.remove();				}			}			//生成二级目录map数据			for(Iterator<Catalog> it = catalogsList.iterator();it.hasNext();){				Catalog item = it.next();				Catalog rootItem = map.get(item.getPid());				if(rootItem!=null){					if(rootItem.getChildren()==null){						rootItem.setChildren(new LinkedList<Catalog>());					}					//获取推荐目录数据,设置在一级目录下					if(rootItem.getRecommend() == null) {						rootItem.setRecommend(new LinkedList<Catalog>());					}					if(Catalog.CATALOG_RECOMMEND_Y.equals(item.getIsRecommend())) {						rootItem.getRecommend().add(item);					}					//生成三级目录map数据					for(Iterator<Catalog> it1 = catalogsList.iterator();it1.hasNext();){						Catalog item1 = it1.next();						if(item.getId().longValue() == item1.getPid().longValue()) {							if(item.getChildren()==null){								item.setChildren(new LinkedList<Catalog>());							}							if(Catalog.CATALOG_RECOMMEND_Y.equals(item1.getIsRecommend())) {								rootItem.getRecommend().add(item1);							}							item.getChildren().add(item1);						}					}					rootItem.getChildren().add(item);				}			}						//获取根目录数据			for(Iterator<Entry<Long, Catalog>> it = map.entrySet().iterator();it.hasNext();){				catalogs.add(it.next().getValue());			}						//对主类别和子类别进行排序			Collections.sort(catalogs, new Comparator<Catalog>() {				public int compare(Catalog o1, Catalog o2) {					if (o1.getSort() > o2.getSort()) {						return 1;					} else if (o1.getSort() < o2.getSort()) {						return -1;					}					return 0;				}			});						for(int i=0;i<catalogs.size();i++){				if(catalogs.get(i).getChildren()==null || catalogs.get(i).getChildren().isEmpty()){					continue;				}				//二级目录排序				Collections.sort(catalogs.get(i).getChildren(), new Comparator<Catalog>() {					public int compare(Catalog o1, Catalog o2) {						if (o1.getSort() > o2.getSort()) {							return 1;						} else if (o1.getSort() < o2.getSort()) {							return -1;						}						return 0;					}				});								//三级目录排序				List<Catalog> secondCatalogList = catalogs.get(i).getChildren();				for (Catalog secondCatalog : secondCatalogList) {					if (secondCatalog.getChildren() == null || secondCatalog.getChildren().isEmpty()) {						continue;					}					Collections.sort(secondCatalog.getChildren(), new Comparator<Catalog>() {						public int compare(Catalog o1, Catalog o2) {							if (o1.getSort() > o2.getSort()) {								return 1;							} else if (o1.getSort() < o2.getSort()) {								return -1;							}							return 0;						}					});				}			}		}		return catalogs;	}		/**	 * 不支持批量删除	 */	public String deletes() throws Exception {		throw new NullPointerException();	}	@Override	public String toAdd() throws Exception {		String type = getE().getType();		logger.error("CatalogAction.toAdd.type="+e.getType());		getE().clear();		getE().setType(type);		return toAdd;	}	@Override	public String toEdit() throws Exception {		if(e.getId() == null){			throw new NullPointerException("非法请求！");		}		Long _id = e.getId();		e.clear();		e.setId(_id);		e = getServer().selectOne(e);				if(e==null){			throw new NullPointerException("非法请求！");		}		return toEdit;	}	/**	 * 返回到查询页面	 */	public String back() throws Exception {		return selectList();	}		public String insert() throws Exception {		if(e.getPid()==null){			e.setPid(0L);		}		String type = e.getType();		logger.error("type = "+type);		try {			getServer().insert(getE());			e.clear();		} catch (Exception e) {			e.printStackTrace();			throw e;		}				reset();				getE().setType(type);		return super.selectAllList;	}		public String update() throws Exception {		String type = e.getType();		logger.error("type = "+type);		try {			getServer().update(getE());			e.clear();								} catch (Exception e) {			e.printStackTrace();			throw e;		}				reset();		getE().setType(type);		return super.selectAllList;	}		/**	 * 唯一性检查	 * @return	 * @throws IOException 	 */	public String unique() throws IOException {		logger.error("unique code = " + e.getCode() + ",id = " + e.getId());		synchronized (this) {			if (StringUtils.isNotBlank(e.getCode())) {				Long id = e.getId();				Catalog catalog = new Catalog();				catalog.setCode(e.getCode());				catalog.setId(null);				catalog = catalogService.selectOne(catalog);				if (catalog == null) {					// 数据库中部存在此编码					getResponse().getWriter().write("{\"ok\":\"编码可以使用!\"}");				} else {					if (id == null || (!id.equals(catalog.getId()))) {						// 当前为insert操作，但是编码已经存在，则只可能是别的记录的编码						getResponse().getWriter().write("{\"error\":\"编码已经存在!\"}");					} else {						// update操作，又是根据自己的编码来查询的，所以当然可以使用啦						getResponse().getWriter().write("{\"ok\":\"编码可以使用!\"}");					}				}			} else {				getResponse().getWriter().write("{\"error\":\"编码不能为空!\"}");			}		}		return null;	}		/**	 * 根据类别名称自动获取拼音-ajax	 * @return	 * @throws IOException 	 */	public String autoCode() throws IOException{		if(StringUtils.isBlank(e.getName())){			return null;		}				String pinyin = PinYinUtil.getPingYin(e.getName());		logger.error("pinyin="+pinyin);		while(true){			Catalog c = new Catalog();			c.setCode(pinyin);			c = catalogService.selectOne(c);			if(c==null){				super.write(pinyin);				break;			}else{				pinyin = pinyin + "1";			}		}		return null;	}}